// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  first_name            String?   @db.VarChar(100)
  last_name             String?   @db.VarChar(100)
  email                 String    @unique
  password              String    @db.VarChar(1000)
  date_of_birth         DateTime?
  phone                 String?   @db.VarChar(50)
  address               String?   @db.VarChar(1000)
  role                  UserType  @default(USER)
  image_id              String?
  image_url             String?
  refresh_token         String?
  refresh_tooken_expire DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  orders                Order[]

  @@index([id, email, first_name])
  @@map("users")
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String
  description   String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  products      Product[]

  @@index([id, category_name])
  @@map("categories")
}

model Product {
  id           Int     @id @default(autoincrement())
  product_name String  @db.VarChar(100)
  description  String? @db.VarChar(255)
  in_stock     Int
  unit_price   Float
  image_id     String?
  image_url    String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  category_id Int
  category    Category      @relation(fields: [category_id], references: [id])
  OrderDetail OrderDetail[]

  @@index([id, product_name])
  @@map("products")
}

model Order {
  id         String    @id
  status     OrderType @default(WAITING)
  address    String    @db.VarChar(1000)
  order_date DateTime  @default(now())

  user_id       Int
  user          User          @relation(fields: [user_id], references: [id])
  order_details OrderDetail[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, status])
  @@map("orders")
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
  order_id   String?
  order      Order?  @relation(fields: [order_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  @@map("order_details")
}

enum UserType {
  GUEST
  USER
  ADMIN
}

enum OrderType {
  WAITING
  PENDING
  ON_WAY
  SHIPPING
}
